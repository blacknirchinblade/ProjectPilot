# Documentation Agent Prompts

generate_readme:
  description: "Generates a comprehensive README.md file for the project."
  prompt: |
    You are an expert technical writer tasked with creating a professional, comprehensive, and user-friendly README.md file for a new software project.

    **Project Configuration:**
    ```json
    {project_config}
    ```

    **Project File Structure:**
    ```
    {file_structure}
    ```

    **Instructions:**

    Based on the provided project configuration and file structure, generate a complete README.md file. The README should be well-structured, informative, and visually appealing.

    **Requirements:**

    1.  **Project Title and Description:**
        -   Start with a clear and concise title (`# {project_name}`).
        -   Include the project description provided in the configuration.
        -   Add a badge indicating it was "Auto-generated by ProjectPilot".

    2.  **Features Section:**
        -   Create a "🚀 Features" section.
        -   List the key features of the project based on the enabled components (e.g., FastAPI Backend, Streamlit UI, Docker Support, CI/CD, etc.). Use emojis for visual appeal.

    3.  **Installation and Setup:**
        -   Create a "🛠️ Installation & Setup" section.
        -   Provide clear, step-by-step instructions for setting up the project locally.
        -   Include commands for creating a virtual environment, installing dependencies from `requirements.txt`, and setting up the `.env` file.

    4.  **Usage/Running the Project:**
        -   Create a "▶️ Running the Project" section.
        -   Provide commands to run the main application (e.g., FastAPI with `uvicorn`, Streamlit with `streamlit run`).
        -   If Docker is enabled, include a subsection for running with `docker-compose`.

    5.  **Project Structure:**
        -   Create a "📁 Project Structure" section.
        -   Include a visual representation of the project's directory structure. Use the provided file structure as a reference.
        -   Briefly explain the purpose of the main directories (e.g., `src`, `api`, `tests`, `deployment`).

    6.  **API Documentation (if applicable):**
        -   If a FastAPI backend is included, create an "📚 API Documentation" section.
        -   Provide links to the interactive docs (`/docs`) and ReDoc (`/redoc`).

    7.  **Testing:**
        -   Create a "🧪 Testing" section.
        -   Provide the command to run the test suite using `pytest`.
    8.  **Deployment:**
        -   Create a "🚀 Deployment" section.
        -   Provide instructions for deploying the project (e.g., using Docker, Kubernetes, etc.).

    9.  **Contributing:**
        -   Create a "🙌 Contributing" section.
        -   Include instructions for contributing to the project (e.g., pull requests, bug reports, etc.).  

    10. **License:**
        -   Create a "📜 License" section.
        -   Include the project's license information.
    11. **Contact Information:**
        -   Create a "📞 Contact" section.
        -   Include contact details for the project maintainers (e.g., email, social media links).
    12. **Acknowledgements:**
        -   Create a "🙏 Acknowledgements" section.
        -   Mention any third-party libraries, tools, or resources used in the project.

    **Format:**

    -   Use Markdown for formatting.
    -   Use headings, bullet points, and code blocks to keep the content organized and easy to read.
    -   Ensure all commands are in `bash` code blocks.

    Generate the complete README.md file now.
  variables:
    - "project_config"
    - "file_structure"
    - "project_name"

generate_docstrings: |
  Add comprehensive docstrings to this code:
  
  Code:
  ```python
  {code}
  ```
  
  Use Google style docstrings with:
  - Brief description
  - Detailed description if needed
  - Args section with types and descriptions
  - Returns section with type and description
  - Raises section for exceptions
  - Example section with usage
  - Notes section for important information
  
  Return the code with complete docstrings.

generate_api_documentation: |
  Generate API documentation for these modules:
  
  Modules: {modules}
  
  For each module document:
  - Module purpose
  - Classes with their methods
  - Functions with signatures
  - Parameters and return types
  - Usage examples
  - Error conditions
  
  Format as markdown with proper sections and code examples.

generate_technical_report: |
  Generate a technical report for this project:
  
  Project: {project_name}
  Type: {project_type}
  Architecture: {architecture}
  
  Report Structure:
  1. Executive Summary
  2. Introduction and Background
  3. System Architecture
     - High-level design
     - Component descriptions
     - Data flow diagrams (describe in text)
  4. Technical Implementation
     - Key algorithms
     - Model architecture (if ML project)
     - Data pipeline
  5. Performance Analysis
     - Metrics used
     - Results
     - Benchmarks
  6. Deployment Guide
  7. Known Limitations
  8. Future Enhancements
  9. Conclusion
  
  Make it professional and detailed.

generate_interview_qa: |
  Generate interview preparation questions and answers for this project:
  
  Project: {project_name}
  Technologies: {technologies}
  Architecture: {architecture}
  
  Generate 20-30 questions covering:
  
  1. Architecture Questions (5-7)
     - Why this architecture?
     - Trade-offs made
     - Scalability considerations
  
  2. Technical Implementation (7-10)
     - Key algorithms/models used
     - Why chosen?
     - Alternatives considered
  
  3. Code Design (5-7)
     - Design patterns used
     - Code organization
     - Best practices followed
  
  4. Problem-Solving (3-5)
     - Challenges faced
     - How solved
     - What learned
  
  5. ML-Specific (if applicable) (5-7)
     - Model selection rationale
     - Hyperparameter tuning
     - Evaluation metrics
     - Data preprocessing choices
  
  For each question provide:
  - The question
  - A detailed answer
  - Key points to mention
  
  Format as markdown with sections.

generate_user_guide: |
  Create a user guide for:
  
  Project: {project_name}
  Features: {features}
  
  Include:
  1. Getting Started
     - Installation
     - Setup
     - First run
  
  2. Features Guide
     - How to use each feature
     - Step-by-step instructions
     - Screenshots/examples (describe what they would show)
  
  3. Configuration Options
  
  4. Troubleshooting
     - Common issues
     - Solutions
  
  5. FAQ
  
  6. Advanced Usage
  
  Make it beginner-friendly with clear examples.

generate_workflow_doc:
  description: "Generates a WORKFLOW.md document explaining the agent pipeline."
  prompt: |
    Generate a WORKFLOW.md file that explains the high-level agent-based workflow for the project.
    Project Configuration: {config}
    Explain the sequence of agents (e.g., Clarification -> Architect -> Coding -> Review) and the purpose of each phase.
  variables:
    - "config"

generate_usage_guide:
  description: "Generates a USAGE.md document for end-users."
  prompt: |
    Generate a USAGE.md file for end-users of this project.
    Project Configuration: {config}
    Include sections on how to run the application, use the API, and interact with the Streamlit UI.
  variables:
    - "config"

generate_data_guide:
  description: "Generates a DATA_GUIDE.md for using custom datasets."
  prompt: |
    Generate a DATA_GUIDE.md file that explains how a user can use their own custom dataset with this project.
    Project Configuration: {config}
    Provide instructions on data format, directory structure, and how to modify the data loading scripts.
  variables:
    - "config"
